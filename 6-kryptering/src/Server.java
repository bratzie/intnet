import com.sun.tools.javac.util.Context;

import javax.net.ssl.*;
import java.io.*;
import java.security.*;
import java.security.cert.*;

public class Server{

    public static void main(String[] args) {
        // init stuff
        KeyStore ks;
        InputStream is;
        OutputStream out;

        try {
            // get KeyStore
            ks = KeyStore.getInstance("JKS", "SUN");
            // read our key generated by KeyTool
            is = new FileInputStream(new File("key"));

            assert ks != null;
            // load key with our storepass
            ks.load(is,"rootroot".toCharArray());

            // create a kmf with default algorithm
            KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm()); //SunX509?
            kmf.init(ks, "hejsan".toCharArray());

            // get context
            SSLContext context = SSLContext.getInstance("TLS");
            context.init(kmf.getKeyManagers(), null, null);

            // create SSLServerSocketFactory
            SSLServerSocketFactory factory = context.getServerSocketFactory();
            SSLServerSocket serverSocket = (SSLServerSocket) factory.createServerSocket(4711);

            // set print selected cipher
            String[] cipher = {"SSL_DH_anon_WITH_RC4_128_MD5"};
            serverSocket.setEnabledCipherSuites(cipher);

            for(int i = 0; i < serverSocket.getEnabledCipherSuites().length; i++)
                System.out.println(serverSocket.getEnabledCipherSuites()[i]);

            SSLSocket socket = (SSLSocket) serverSocket.accept();
            socket.setEnabledCipherSuites(cipher);
            try {
                socket.startHandshake();

                out = socket.getOutputStream();

                out.write("Sallad".getBytes());

                out.flush();

                BufferedReader infil = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                String rad = null;

                while( (rad=infil.readLine()) != null)
                    System.out.println(rad);

                infil.close();
            } catch (SSLHandshakeException e) {
                e.printStackTrace();
            } finally {
                if (socket != null)
                    socket.close();
            }
        } catch (Exception e) {
            // one catch to rule them all
            e.printStackTrace();
        }
    }
}
